name: Build And Push RPM for systems like RedHat / CentOS

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release number for RPM package'
        required: true
  # push:
  #   paths-ignore:
  #     - 'README.md'
  #     - '.github/**'
  #     - 'configyamls/**'
  #   branches:
  #    - 'master'
  #    - 'workflow-experiments'

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  
# env:
#   ARCH: arm64
#   BINARY_SOURCE: release/mw-go-agent-host-arm
#   BINARY_NAME: mw-go-agent-host-arm
#   RELEASE_VERSION: 0.0.15-aws-arm64

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        arch:
          - ARM
          - x64

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GHCR_TOKEN }}
        ssh-key: ${{ secrets.CHECK_AGENT_ACCESS }}
        submodules: 'recursive'
        
    - name: Set architecture variables
      run: |
        if [ ${{ matrix.arch }} == "x64" ]; then
          echo "::set-env name=ARCH::all"
          echo "::set-env name=BINARY_SOURCE::release/mw-go-agent-host"
          echo "::set-env name=RELEASE_VERSION::$(echo "${{ github.event.inputs.release_version }}" | tr -d '\n')"
          echo "::set-env name=BINARY_NAME::mw-go-agent-host"
          echo "::set-env name=SPEC_FILE::test.spec"
        elif [ ${{ matrix.arch }} == "ARM" ]; then
          echo "::set-env name=ARCH::arm64"
          echo "::set-env name=BINARY_SOURCE::release/mw-go-agent-host-arm"
          echo "::set-env name=RELEASE_VERSION::$(echo "${{ github.event.inputs.release_version }}" | tr -d '\n')"
          echo "::set-env name=BINARY_NAME::mw-go-agent-host-arm"
          echo "::set-env name=SPEC_FILE::test-arm.spec"
        else
          echo "Unsupported architecture"
          exit 1
        fi

    - name: Creating Spec files
      run: |
        mkdir -p installables/rpmessentials
        touch installables/rpmessentials/$SPEC_FILE
        if [ ${{ matrix.arch }} == "x64" ]; then
          cat << EOF > installables/rpmessentials/test.spec
        Name: mw-go-agent-host
        Version: $RELEASE_VERSION
        Release: 1
        Summary: My Package Summary
        License: GPL
        Group: Development/Tools
        Source0: mw-go-agent-host_$RELEASE_VERSION-1_all.tar.gz
        
        
        %description
        My package description
        
        %prep
        %setup -q
        
        %build
        
        %install
        mkdir -p %{buildroot}/usr/bin/mw-go-agent-host
        cp -rfa ~/rpmbuild/BUILD/mw-go-agent-host-$RELEASE_VERSION/* %{buildroot}/usr/bin/mw-go-agent-host
        
        %files
        /usr/bin/mw-go-agent-host/*
        EOF
        elif [ ${{ matrix.arch }} == "ARM" ]; then
          cat << EOF > installables/rpmessentials/test-arm.spec
        Name: mw-go-agent-host-arm
        Version: $RELEASE_VERSION
        Release: 1
        Summary: My Package Summary
        License: GPL
        Group: Development/Tools
        Source0: mw-go-agent-host-arm_$RELEASE_VERSION-1_arm64.tar.gz
        
        
        %description
        My package description
        
        %prep
        %setup -q
        
        %build
        
        %install
        mkdir -p %{buildroot}/usr/bin/mw-go-agent-host-arm
        cp -rfa ~/rpmbuild/BUILD/mw-go-agent-host-arm-$RELEASE_VERSION/* %{buildroot}/usr/bin/mw-go-agent-host-arm
        
        %files
        /usr/bin/mw-go-agent-host-arm/*
        EOF
        else
          echo "Unsupported architecture"
          exit 1
        fi

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Creating Required Folder Structure
      run: |
        mkdir -p ~/rpmbuild/BUILD
        mkdir -p ~/rpmbuild/BUILDROOT
        mkdir -p ~/rpmbuild/RPMS
        mkdir -p ~/rpmbuild/SOURCES
        mkdir -p ~/rpmbuild/SPECS
        mkdir -p ~/rpmbuild/SRPMS
        mkdir -p ~/rpmbuild/SOURCES/$BINARY_NAME-$RELEASE_VERSION
        echo '%_topdir %(echo $HOME)/rpmbuild' > ~/.rpmmacros
        touch ~/rpmbuild/SPECS/$SPEC_FILE
        cp installables/rpmessentials/$SPEC_FILE ~/rpmbuild/SPECS/$SPEC_FILE

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.20.0

    - name: Go Build
      run: |
        if [ ${{ matrix.arch }} == "x64" ]; then
          go build -v -o ~/rpmbuild/SOURCES/$BINARY_NAME-$RELEASE_VERSION/$BINARY_NAME cmd/host-agent/main.go
        elif [ ${{ matrix.arch }} == "ARM" ]; then
          GOOS=linux GOARCH=$ARCH  go build -ldflags="-s -w" -v -a -o ~/rpmbuild/SOURCES/$BINARY_NAME-$RELEASE_VERSION/$BINARY_NAME cmd/host-agent/main.go
        else
          echo "Unsupported architecture"
          exit 1
        fi

    - name: Tar Building
      run: |
        cd ~/rpmbuild/SOURCES
        echo "binary name"
        echo $BINARY_NAME
        echo "architecture"
        echo $ARCH
        tar czvf ~/rpmbuild/SOURCES/${BINARY_NAME}_$RELEASE_VERSION-1_$ARCH.tar.gz $BINARY_NAME-$RELEASE_VERSION/

        ls -l ~/rpmbuild/SOURCES/

    - name: Create RPM package
      run: |
        ls -l ~/rpmbuild/SOURCES

        if [ ${{ matrix.arch }} == "x64" ]; then
          rpmbuild -ba ~/rpmbuild/SPECS/$SPEC_FILE
        elif [ ${{ matrix.arch }} == "ARM" ]; then
          rpmbuild -ba --target=aarch64 ~/rpmbuild/SPECS/$SPEC_FILE
        else
          echo "Unsupported architecture"
          exit 1
        fi

    - name: Acquire lock
      run: flock upload.lock -c "echo Lock acquired"

    - name: Upload artifacts to Github Pages (install.middleware.io)
      run: |

        git clone https://.:${{ secrets.GHCR_TOKEN }}@github.com/middleware-labs/install.middleware.io.git
        mkdir -p install.middleware.io/rpms

        if [ ${{ matrix.arch }} == "x64" ]; then
          cp -r ~/rpmbuild/RPMS/x86_64/$BINARY_NAME-$RELEASE_VERSION-1.x86_64.rpm install.middleware.io/rpms/
        elif [ ${{ matrix.arch }} == "ARM" ]; then
          cp -r ~/rpmbuild/RPMS/aarch64/$BINARY_NAME-$RELEASE_VERSION-1.aarch64.rpm install.middleware.io/rpms/
        else
          echo "Unsupported architecture"
          exit 1
        fi

        
        cd install.middleware.io
        git config --global user.email "keval@middleware.io"
        git config --global user.name "bhogayatakb"
        git add .
        git commit -m "RPM added to install.middleware.io"
        git fetch origin master
        git merge origin/master
        git push origin master
    
    - name: Release lock
      run: flock upload.lock -c "echo Lock released"
    - name: Delay
      run: sleep 10

      # i386: 32-bit x86 architecture
      # x86_64: 64-bit x86 architecture
      # armv7hl: 32-bit ARM architecture
      # aarch64: 64-bit ARM architecture
      # ppc64: 64-bit PowerPC architecture
