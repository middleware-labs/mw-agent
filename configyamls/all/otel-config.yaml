receivers:
    otlp:
        protocols:
            grpc:
                endpoint: 0.0.0.0:9319
            http:
                endpoint: 0.0.0.0:9320
    hostmetrics:
        collection_interval: 5s
        scrapers:
            cpu:
                metrics:
                    system.cpu.utilization:
                        enabled: true
            load:
                cpu_average: true
            memory:
                metrics:
                    system.memory.utilization:
                        enabled: true
            paging: {}
            disk:
                metrics:
                    system.disk.io.speed:
                        enabled: true
            filesystem:
                include_virtual_filesystems: true
                metrics:
                    system.filesystem.utilization:
                        enabled: true
            network:
                metrics:
                    system.network.io.bandwidth:
                        enabled: true
            processes: {}
            process:
                avoid_selected_errors: true
                mute_process_name_error: true
    docker_stats:
        endpoint: unix:///var/run/docker.sock
        collection_interval: 5s
        timeout: 20s
        api_version: 1.24
    prometheus:
        config:
            scrape_configs:
                - job_name: otel-collector
                  scrape_interval: 5s
                  static_configs:
                    - targets:
                        - 0.0.0.0:8888
    filelog:
        include: [ /var/log/**/*.log*, $MW_LOG_PATHS ]
        exclude:
            - /tmp/mwagent/record_time.log
        include_file_path: true
        include_file_name_resolved: true
        include_file_path_resolved: true
        operators:
            - type: add
              if: body matches "ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+ err=.+"
              id: adding_regex_to_attributes
              field: attributes.regex_identified
              value: ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+ err=.+
              output: systemd_err
            - type: regex_parser
              if: body matches "ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+ err=.+"
              id: systemd_err
              output: backup_unresolved_body
              regex: ts=(?P<systemd_err_ts>.+) caller=(?P<systemd_err_caller>.+) level=(?P<level>.+) msg=(?P<systemd_err_msg>.+) name=(?P<name>.+) duration_seconds=(?P<systemd_err_duration_seconds>.+) err="(?P<regex_resolved_body>.+)"
              parse_from: body
            - type: copy
              if: attributes.regex_resolved_body != nil
              id: backup_unresolved_body
              output: systemd_err_move
              from: body
              to: attributes.regex_unresolved_body
            - type: move
              if: attributes.regex_resolved_body != nil
              id: systemd_err_move
              from: attributes.regex_resolved_body
              to: body
    fluentforward:
        endpoint: 0.0.0.0:8006
processors:
    batch:
    # filter/blanklog:
    #     logs: 
    #         exclude:
    #             match_type: strict
    #             bodies:
    #             - \n
    #             - {}\n
    resource:
        attributes:
            - key: mw.account_key
              action: upsert
              value: ${MW_API_KEY}
            - key: host.id
              action: upsert
              from_attribute: host.name
            - key: agent.installation.time
              action: insert
              from_attribute: host.name
            - key: agent.installation.time
              action: update
              value: ${MW_AGENT_INSTALLATION_TIME}
    resource/2:
        attributes:
            - key: mw.account_key
              action: upsert
              value: ${MW_API_KEY}
            - key: service.name
              action: insert
              value: middleware-logs
            - key: host.id
              action: upsert
              from_attribute: host.name
    resource/3:
        attributes:
            - key: mw.account_key
              action: upsert
              value: ${MW_API_KEY}
            - key: host.id
              action: upsert
              from_attribute: host.name
    attributes/traces:
        actions:
            - key: mw.service.name.derived
              from_attribute: db.system
              action: insert
            - key: mw.service.name.derived
              from_attribute: messaging.system
              action: insert
            - key: mw.service.name.derived
              from_attribute: rpc.system
              action: insert
            - key: mw.service.name.derived
              from_attribute: http.scheme
              action: insert
            - key: mw.service.name.derived
              from_attribute: faas.trigger
              action: insert
    resourcedetection:
        detectors:
            - env
            - system
            - docker
        timeout: 5s
        override: false
    servicegraph:
        metrics_exporter: prometheus # Exporter to send metrics to
        latency_histogram_buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms] # Buckets for latency histogram
        # dimensions: [cluster, namespace] # Additional dimensions (labels) to be added to the metrics extracted from the resource and span attributes
        # store: # Configuration for the in-memory store
        # ttl: 2s # Value to wait for an edge to be completed
        # max_items: 200 # Amount of edges that will be stored in the storeMap      
exporters:
    logging:
        loglevel: debug
    prometheus:
        endpoint: localhost:9090
        namespace: servicegraph
    # otlp/2:
    #     endpoint: ${TARGET}
    #     headers:
    #         authorization: ${MW_API_KEY}
    #     sending_queue:
    #         enabled: true
    #         num_consumers: 100
    #         queue_size: 10000
service:
    pipelines:
        metrics:
            receivers:
                # - hostmetrics
                # - docker_stats
                - otlp
                # - prometheus
            processors:
                - resourcedetection
                - resource
                - batch
            exporters:
                # - otlp/2
                - prometheus
        # logs:
        #     receivers:
        #         - otlp
        #         - fluentforward
        #         - filelog
        #     processors:
        #         # - filter/blanklog
        #         - resourcedetection
        #         - resource/2
        #         - batch
        #     exporters:
        #         - otlp/2
        traces:
            receivers:
                - otlp
            processors:
                - resourcedetection
                - resource/3
                - attributes/traces
                - batch
                - servicegraph
            exporters:
                - logging
    telemetry:
        logs:
            level: debug
