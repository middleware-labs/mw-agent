receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:9319
      http:
        endpoint: 0.0.0.0:9320

  # Scrapping OS metrics (Infra Metrics)
  hostmetrics:
    collection_interval: 5s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      load:
        cpu_average: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      paging: {}
      disk: {}
      filesystem: {}
      network: {}
      processes: {}
      process:
        avoid_selected_errors: true
        mute_process_name_error: true

  docker_stats:
    endpoint: unix:///var/run/docker.sock
    collection_interval: 5s
    timeout: 20s
    api_version: 1.24

  # Read log files (Infra logs + APM logs)
  filelog:
    include: [ /var/log/**/*.log ]
    include_file_path: true
    include_file_name_resolved: true
    include_file_path_resolved: true
    start_at: beginning

  # Read log sent through fluent protocol (APM logs)
  fluentforward:
    endpoint: 0.0.0.0:8006

# extensions:
#   health_check:

processors:
  # metrics
  resource:
    attributes:
    - key: mw.account_key
      action: upsert
      value: ${MW_API_KEY}
    - key: host.id
      from_attribute: host.name
      action: upsert

  # logs
  resource/2:
    attributes:
    - key: mw.account_key
      action: upsert
      value: ${MW_API_KEY}
    - key: service.name
      action: insert
      value: middleware-logs
    - key: host.id
      from_attribute: host.name
      action: upsert

  # traces
  resource/3:
    attributes:
    - key: mw.account_key
      action: upsert
      value: ${MW_API_KEY}
    - key: host.id
      from_attribute: host.name
      action: upsert

  attributes/traces:
    actions:
      - key: mw.service.name.derived
        from_attribute: db.system
        action: insert
      - key: mw.service.name.derived
        from_attribute: messaging.system
        action: insert
      - key: mw.service.name.derived
        from_attribute: rpc.system
        action: insert
      - key: mw.service.name.derived
        from_attribute: http.scheme
        action: insert
      - key: mw.service.name.derived
        from_attribute: faas.trigger
        action: insert

  resourcedetection:
    detectors: [ env, system, docker ]
    timeout: 5s
    override: false

exporters:
  logging:
    loglevel: debug
  otlp/2:
    endpoint: ${TARGET}
    tls:
      insecure: true
      insecure_skip_verify: true
    headers:
      authorization: ${MW_API_KEY}
    sending_queue:
      enabled: true
      num_consumers: 100
      queue_size: 10000

service:
#   extensions: [health_check]
  pipelines:
    metrics:
      receivers: [ hostmetrics, docker_stats, otlp ]
      processors: [ resourcedetection, resource ]
      exporters: [ otlp/2 ]
    logs:
      receivers: [ fluentforward, otlp, filelog ]
      processors: [ resourcedetection, resource/2 ]
      exporters: [ otlp/2 ]
    traces:
      receivers: [ otlp ]
      processors: [ resourcedetection, resource/3, attributes/traces ]
      exporters: [ otlp/2, logging ]
  telemetry:
    logs:
      level: debug
