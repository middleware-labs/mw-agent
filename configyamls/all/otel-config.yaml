exporters:
  logging:
    loglevel: debug
  otlp/2:
    endpoint: ${MW_TARGET}
    headers:
      authorization: ${MW_API_KEY}
    sending_queue:
      enabled: true
      num_consumers: 100
      queue_size: 10000
processors:
  attributes/logs:
    actions:
    - action: upsert
      from_attribute: name
      key: source
    - action: upsert
      from_attribute: operator_type
      key: source
    - action: upsert
      from_attribute: log.file.name
      key: source
    - action: upsert
      from_attribute: fluent.tag
      key: source
    - action: upsert
      from_attribute: service.name
      key: source
    - action: upsert
      from_attribute: project.name
      key: source
    - action: upsert
      from_attribute: serviceName
      key: source
    - action: upsert
      from_attribute: projectName
      key: source
    - action: upsert
      from_attribute: pod_name
      key: source
    - action: upsert
      from_attribute: container_name
      key: source
    - action: upsert
      from_attribute: namespace
      key: source
  attributes/traces:
    actions:
    - action: insert
      from_attribute: db.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: messaging.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: rpc.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: http.scheme
      key: mw.service.name.derived
    - action: insert
      from_attribute: faas.trigger
      key: mw.service.name.derived
  batch: null
  resource:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: upsert
      from_attribute: host.name
      key: host.id
    - action: insert
      from_attribute: host.name
      key: agent.installation.time
    - action: update
      key: agent.installation.time
      value: ${MW_AGENT_INSTALLATION_TIME}
  resource/2:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: insert
      key: service.name
      value: middleware-logs
    - action: upsert
      from_attribute: host.name
      key: host.id
  resource/3:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: upsert
      from_attribute: host.name
      key: host.id
  resource/mongodb:
    attributes:
    - action: insert
      from_attribute: mongodb.database.name
      key: mw.db.name
    - action: upsert
      key: mw.db.name
      value: mongodb
  resource/mysql:
    attributes:
    - action: insert
      from_attribute: mysql.instance.endpoint
      key: mw.db.name
    - action: upsert
      key: mw.db.name
      value: mysql
  resource/sqlserver:
    attributes:
    - action: insert
      from_attribute: sqlserver.database.name
      key: mw.db.name
    - action: upsert
      key: mw.db.name
      value: sqlserver
  resource/postgresql:
    attributes:
    - action: insert
      from_attribute: postgresql.database.name
      key: mw.db.name
    - action: upsert
      key: mw.db.name
      value: postgresql
  resourcedetection:
    detectors:
    - env
    - system
    - docker
    override: false
    timeout: 5s
receivers:
  docker_stats:
    api_version: 1.24
    collection_interval: 5s
    endpoint: unix:///var/run/docker.sock
    timeout: 20s
  filelog:
    include:
    - /var/log/**/*.log*
    - /var/lib/docker/container/**/*.log*
    include_file_name_resolved: true
    include_file_path: true
    include_file_path_resolved: true
    operators:
    - field: attributes.regex_identified
      id: adding_regex_to_attributes
      if: body matches "ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+
        err=.+"
      output: systemd_err
      type: add
      value: ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+ err=.+
    - id: systemd_err
      if: body matches "ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+
        err=.+"
      output: backup_unresolved_body
      parse_from: body
      regex: ts=(?P<systemd_err_ts>.+) caller=(?P<systemd_err_caller>.+) level=(?P<level>.+)
        msg=(?P<systemd_err_msg>.+) name=(?P<name>.+) duration_seconds=(?P<systemd_err_duration_seconds>.+)
        err="(?P<regex_resolved_body>.+)"
      type: regex_parser
    - from: body
      id: backup_unresolved_body
      if: attributes.regex_resolved_body != nil
      output: systemd_err_move
      to: attributes.regex_unresolved_body
      type: copy
    - from: attributes.regex_resolved_body
      id: systemd_err_move
      if: attributes.regex_resolved_body != nil
      to: body
      type: move
  fluentforward:
    endpoint: 0.0.0.0:8006
  hostmetrics:
    collection_interval: 5s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
        metrics:
          system.disk.io.speed:
            enabled: true
      filesystem:
        include_virtual_filesystems: true
        metrics:
          system.filesystem.utilization:
            enabled: true
      load:
        cpu_average: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
        metrics:
          system.network.io.bandwidth:
            enabled: true
      paging: {}
      process:
        avoid_selected_errors: true
        mute_process_name_error: true
      processes: {}
  mongodb:
    collection_interval: 60s
    hosts:
    - endpoint: localhost:27017
    tls:
      insecure: true
      insecure_skip_verify: true
  mysql:
    collection_interval: 10s
    endpoint: localhost:3306
    password: password
    username: root
  sqlserver:
    collection_interval: 10s
#    endpoint: localhost:3306
#    password: password
#    username: root
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:9319
      http:
        endpoint: 0.0.0.0:9320
  postgresql:
    collection_interval: 10s
    endpoint: localhost:5432
    password: postgres
    tls:
      insecure: true
    transport: tcp
    username: postgres
  prometheus:
    config:
      scrape_configs:
      - job_name: otel-collector
        scrape_interval: 5s
        static_configs:
        - targets:
          - 0.0.0.0:8888
service:
  pipelines:
    logs:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource/2
      - attributes/logs
      - batch
      receivers:
      - otlp
      - fluentforward
      - filelog
    metrics:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource
      - batch
      receivers:
      - hostmetrics
      - docker_stats
      - otlp
      - prometheus
    metrics/mongodb:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource
      - resource/mongodb
      - batch
      receivers:
      - mongodb
    metrics/mysql:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource
      - resource/mysql
      - batch
      receivers:
      - mysql
    metrics/sqlserver:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource
      - resource/sqlserver
      - batch
      receivers:
      - sqlserver
    metrics/postgresql:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource
      - resource/postgresql
      - batch
      receivers:
      - postgresql
    traces:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource/3
      - attributes/traces
      - batch
      receivers:
      - otlp
  telemetry:
    logs:
      level: fatal
