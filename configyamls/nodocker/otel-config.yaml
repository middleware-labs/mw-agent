
receivers:
    otlp:
        protocols:
            grpc:
                endpoint: 0.0.0.0:9319
            http:
                endpoint: 0.0.0.0:9320
    hostmetrics:
        collection_interval: 5s
        scrapers:
            cpu:
                metrics:
                    system.cpu.utilization:
                        enabled: true
            load:
                cpu_average: true
            memory:
                metrics:
                    system.memory.utilization:
                        enabled: true
            paging: {}
            disk:
                metrics:
                    system.disk.io.speed:
                        enabled: true
            filesystem:
                include_virtual_filesystems: true
                metrics:
                    system.filesystem.utilization:
                        enabled: true
            network:
                metrics:
                    system.network.io.bandwidth:
                        enabled: true
            processes: {}
            process:
                avoid_selected_errors: true
                mute_process_name_error: true
    prometheus:
        config:
            scrape_configs:
                - job_name: otel-collector
                  scrape_interval: 5s
                  static_configs:
                    - targets:
                        - 0.0.0.0:8888
    filelog:
        include: [ /var/log/**/*.log*, $MW_LOG_PATHS ]
        exclude:
            - /tmp/mwagent/record_time.log
        include_file_path: true
        include_file_name_resolved: true
        include_file_path_resolved: true
        operators:
            - type: add
              if: body matches "ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+ err=.+"
              id: adding_regex_to_attributes
              field: attributes.regex_identified
              value: ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+ err=.+
              output: systemd_err
            - type: regex_parser
              if: body matches "ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+ err=.+"
              id: systemd_err
              output: backup_unresolved_body
              regex: ts=(?P<systemd_err_ts>.+) caller=(?P<systemd_err_caller>.+) level=(?P<level>.+) msg=(?P<systemd_err_msg>.+) name=(?P<name>.+) duration_seconds=(?P<systemd_err_duration_seconds>.+) err="(?P<regex_resolved_body>.+)"
              parse_from: body
            - type: copy
              if: attributes.regex_resolved_body != nil
              id: backup_unresolved_body
              output: systemd_err_move
              from: body
              to: attributes.regex_unresolved_body
            - type: move
              if: attributes.regex_resolved_body != nil
              id: systemd_err_move
              from: attributes.regex_resolved_body
              to: body
    fluentforward:
        endpoint: 0.0.0.0:8006
processors:
    batch:
    # filter/blanklog:
    #     logs: 
    #         exclude:
    #             match_type: strict
    #             bodies:
    #             - \n
    #             - {}\n
    resource:
        attributes:
            - key: mw.account_key
              action: upsert
              value: ${MW_API_KEY}
            - key: host.id
              action: upsert
              from_attribute: host.name
            - key: agent.installation.time
              action: insert
              from_attribute: host.name
            - key: agent.installation.time
              action: update
              value: ${MW_AGENT_INSTALLATION_TIME}
            - key: mw.host.tags
              action: insert
              value: ${MW_HOST_TAGS}
    resource/2:
        attributes:
            - key: mw.account_key
              action: upsert
              value: ${MW_API_KEY}
            - key: service.name
              action: insert
              value: middleware-logs
            - key: host.id
              action: upsert
              from_attribute: host.name
    resource/3:
        attributes:
            - key: mw.account_key
              action: upsert
              value: ${MW_API_KEY}
            - key: host.id
              action: upsert
              from_attribute: host.name
    attributes/traces:
        actions:
            - key: mw.service.name.derived
              from_attribute: db.system
              action: insert
            - key: mw.service.name.derived
              from_attribute: messaging.system
              action: insert
            - key: mw.service.name.derived
              from_attribute: rpc.system
              action: insert
            - key: mw.service.name.derived
              from_attribute: http.scheme
              action: insert
            - key: mw.service.name.derived
              from_attribute: faas.trigger
              action: insert
    attributes/logs:
        actions:
            - key: source
              from_attribute: name
              action: upsert
            - key: source
              from_attribute: operator_type
              action: upsert
            - key: source
              from_attribute: log.file.name
              action: upsert
            - key: source
              from_attribute: fluent.tag
              action: upsert
            - key: source
              from_attribute: service.name
              action: upsert
            - key: source
              from_attribute: project.name
              action: upsert
            - key: source
              from_attribute: serviceName
              action: upsert
            - key: source
              from_attribute: projectName
              action: upsert
            - key: source
              from_attribute: pod_name
              action: upsert
            - key: source
              from_attribute: container_name
              action: upsert
            - key: source
              from_attribute: namespace
              action: upsert 
    resourcedetection:
        detectors:
            - env
            - system
            - docker
        timeout: 5s
        override: false
exporters:
  logging:
    loglevel: debug
  otlp/2:
    endpoint: ${MW_TARGET}
    headers:
      authorization: ${MW_API_KEY}
    sending_queue:
      enabled: true
      num_consumers: 100
      queue_size: 10000
processors:
  attributes/logs:
    actions:
    - action: upsert
      from_attribute: name
      key: source
    - action: upsert
      from_attribute: operator_type
      key: source
    - action: upsert
      from_attribute: log.file.name
      key: source
    - action: upsert
      from_attribute: fluent.tag
      key: source
    - action: upsert
      from_attribute: service.name
      key: source
    - action: upsert
      from_attribute: project.name
      key: source
    - action: upsert
      from_attribute: serviceName
      key: source
    - action: upsert
      from_attribute: projectName
      key: source
    - action: upsert
      from_attribute: pod_name
      key: source
    - action: upsert
      from_attribute: container_name
      key: source
    - action: upsert
      from_attribute: namespace
      key: source
  attributes/traces:
    actions:
    - action: insert
      from_attribute: db.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: messaging.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: rpc.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: http.scheme
      key: mw.service.name.derived
    - action: insert
      from_attribute: faas.trigger
      key: mw.service.name.derived
  batch: null
  resource:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: upsert
      from_attribute: host.name
      key: host.id
    - action: insert
      from_attribute: host.name
      key: agent.installation.time
    - action: update
      key: agent.installation.time
      value: ${MW_AGENT_INSTALLATION_TIME}
    - action: insert
      key: mw.host.tags
      value: ${MW_HOST_TAGS}
  resource/2:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: insert
      key: service.name
      value: middleware-logs
    - action: upsert
      from_attribute: host.name
      key: host.id
  resource/3:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: upsert
      from_attribute: host.name
      key: host.id
  resourcedetection:
    detectors:
    - env
    - system
    - docker
    override: false
    timeout: 5s
receivers:
  filelog:
    exclude:
    - /var/log/mw-agent/apt-installation-*.log
    - /var/log/mw-agent/rpm-installation-*.log
    include:
    - /var/log/**/*.log*
    - $MW_LOG_PATHS
    include_file_name_resolved: true
    include_file_path: true
    include_file_path_resolved: true
    operators:
    - field: attributes.regex_identified
      id: adding_regex_to_attributes
      if: body matches "ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+
        err=.+"
      output: systemd_err
      type: add
      value: ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+ err=.+
    - id: systemd_err
      if: body matches "ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+
        err=.+"
      output: backup_unresolved_body
      parse_from: body
      regex: ts=(?P<systemd_err_ts>.+) caller=(?P<systemd_err_caller>.+) level=(?P<level>.+)
        msg=(?P<systemd_err_msg>.+) name=(?P<name>.+) duration_seconds=(?P<systemd_err_duration_seconds>.+)
        err="(?P<regex_resolved_body>.+)"
      type: regex_parser
    - from: body
      id: backup_unresolved_body
      if: attributes.regex_resolved_body != nil
      output: systemd_err_move
      to: attributes.regex_unresolved_body
      type: copy
    - from: attributes.regex_resolved_body
      id: systemd_err_move
      if: attributes.regex_resolved_body != nil
      to: body
      type: move
  fluentforward:
    endpoint: 0.0.0.0:8006
  hostmetrics:
    collection_interval: 5s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
        metrics:
          system.disk.io.speed:
            enabled: true
      filesystem:
        include_virtual_filesystems: true
        metrics:
          system.filesystem.utilization:
            enabled: true
      load:
        cpu_average: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
        metrics:
          system.network.io.bandwidth:
            enabled: true
      paging: {}
      process:
        avoid_selected_errors: true
        mute_process_name_error: true
      processes: {}
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:9319
      http:
        endpoint: 0.0.0.0:9320
  prometheus:
    config:
      scrape_configs:
      - job_name: otel-collector
        scrape_interval: 5s
        static_configs:
        - targets:
          - 0.0.0.0:8888
service:
  pipelines:
    logs:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource/2
      - attributes/logs
      - batch
      receivers:
      - otlp
      - fluentforward
    metrics:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource
      - batch
      receivers:
      - hostmetrics
      - otlp
      - prometheus
    traces:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource/3
      - attributes/traces
      - batch
      receivers:
      - otlp
  telemetry:
    logs:
      level: warn
