#!/bin/bash

# Set path to your Middleware agent configuration file
CONFIG_FILE="/etc/mw-agent/agent-config.yaml"

# Enable Middleware agent service
enable_service () {
    # Reload systemd manager configuration
    systemctl daemon-reload

    # Enable the Middleware agent to start on boot
    systemctl enable mw-agent
}
# Function to restart the Middleware agent service
restart_service() {
    # Enable the Middleware agent service
    enable_service
    # Restart the Middleware agent
    systemctl restart mw-agent
}

# Function to update configuration values

update_config() {
    local key=$1
    local value=$2
    local file=$3

    # For nested keys, we need to treat the YAML structure carefully.
    if [[ "$key" == *.* ]]; then
        local parent_key=${key%%.*}       # Extract parent key (e.g., agent-features)
        local child_key=${key#*.}         # Extract child key (e.g., synthetic-monitoring)
        
        # Check if the parent key exists
        grep -q "^\s*${parent_key}:" "$file"
        if [ $? -eq 0 ]; then
            # Parent key exists, try updating the child key
            sed -i "/^\s*${parent_key}:/,/^\s*[a-zA-Z_-]\+:/ s|^\s*${child_key}:.*|  ${child_key}: ${value}|" "$file"
            
            # If the child key update fails (not found), append it under the parent key
            if ! grep -q "^\s*${parent_key}:.*${child_key}:.*" "$file"; then
                sed -i "/^\s*${parent_key}:/a\  ${child_key}: ${value}" "$file"
            fi
        else
            # Parent key doesn't exist, append both parent and child key
            echo -e "${parent_key}:\n  ${child_key}: ${value}" >> "$file"
        fi
    else
        # For single-level keys
        sed -i "s|^\s*${key}:.*|${key}: ${value}|" "$file"

        # If the key was not updated, append it
        grep -q "^\s*${key}:" "$file"
        if [ $? -ne 0 ]; then
            echo "${key}: ${value}" >> "$file"
        fi
    fi

    # Check if the key was correctly updated or appended
    if [ $? -ne 0 ]; then
        echo "Error: Failed to update configuration file."
        exit 1
    fi
}


# Function to extract environment variables from old execuable file
extract_environment_variables() {
    local script_file="$1"
    
    # Extract lines that set environment variables along with their values
    local variables=$(grep -Eo '^\s*export\s+([a-zA-Z_][a-zA-Z0-9_]*)=\S+' "$script_file" | sed -E 's/^\s*export\s+([a-zA-Z_][a-zA-Z0-9_]*)=(\S+)/\1=\2/')

    # Print the extracted environment variables and their values
    echo "$variables"
}

# Function to handle each environment variable
handle_variable() {
    local key="$1"
    local value="$2"
    
    case "$key" in
        MW_API_KEY)
            update_config "api-key" "$value" "${CONFIG_FILE}"            
            ;;
        MW_TARGET)
            update_config "target" "$value" "${CONFIG_FILE}"
            ;;
        MW_CONFIG_CHECK_INTERVAL)
            update_config "config-check-interval" "$value" "${CONFIG_FILE}"
            ;;
        MW_HOST_TAGS)
            update_config "host-tags" "$value" "${CONFIG_FILE}"
            ;;
        MW_AGENT_INTERNAL_METRICS_PORT)
            update_config "agent-internal-metrics-port" "$value" "${CONFIG_FILE}"
            ;;
        # Advanced configuration options
        MW_API_URL_FOR_CONFIG_CHECK)
            update_config "api-url-for-config-check" "$value" "${CONFIG_FILE}"
            ;;
        MW_API_URL_FOR_SYNTHETIC_MONITORING)
            update_config "api-url-for-synthetic-monitoring" "$value" "${CONFIG_FILE}"
            ;; 
        MW_FETCH_ACCOUNT_OTEL_CONFIG)
            update_config "fetch-account-otel-config" "$value" "${CONFIG_FILE}"
            ;;
        MW_AGENT_FEATURES_SYNTHETIC_MONITORING)
            update_config "agent-features.synthetic-monitoring" "$value" "${CONFIG_FILE}"
            ;;
        MW_AGENT_FEATURES_METRIC_COLLECTION)
            update_config "agent-features.metric-collection" "$value" "${CONFIG_FILE}"
            ;;
        MW_AGENT_FEATURES_LOG_COLLECTION)
            update_config "agent-features.log-collection" "$value" "${CONFIG_FILE}"
            ;;
        MW_AGENT_SELF_PROFILING)
            update_config "mw-agent-self-profiling" "$value" "${CONFIG_FILE}"
            ;;
        MW_PROFILING_SERVER_URL)
            update_config "mw-profiling-server-url" "$value" "${CONFIG_FILE}"
            ;;
        MW_LOGFILE)
            update_config "logfile" "$value" "${CONFIG_FILE}"
            ;;
        MW_LOGFILE_SIZE)
            update_config "logfile-size" "$value" "${CONFIG_FILE}"
            ;;
        MW_FLUENT_PORT)
            update_config "fluent-port" "$value" "${CONFIG_FILE}"
            ;;
        MW_DOCKER_ENDPOINT)
            update_config "docker-endpoint" "$value" "${CONFIG_FILE}"
            ;;
        MW_ENABLE_SYNTHETIC_MONITORING)
            # synthetic monitoring feature has been removed from the agent
            ;;
        
        PATH)
            ;;
        *)
            echo "Unknown key: $key"
            ;;
    esac
}

# Create mw-agent group
if ! getent group mw-agent >/dev/null 2>&1; then
  groupadd --system mw-agent
fi

# Create mw-agent user
if ! getent passwd mw-agent >/dev/null 2>&1; then
  useradd --system --no-create-home --gid mw-agent \
  --group root mw-agent
fi

# Set proper permissions for the Middleware agent configuration directory
chown -R mw-agent:mw-agent /etc/mw-agent

if [ -f "${CONFIG_FILE}" ]; then
  echo "/etc/mw-agent/agent-config.yaml file already exists. Not modifying it."
  restart_service
  exit 0
fi

# Create agent-config.yaml from sample
cp /etc/mw-agent/agent-config.yaml.sample "${CONFIG_FILE}"
# Ensure proper permissions for the configuration file
chmod 644 "${CONFIG_FILE}"
chown mw-agent:mw-agent "${CONFIG_FILE}"


# Check for old installation and convert it to config file
# This is the case user is upgrading mw-agent <= 1.5 to latest
if [ -f /etc/systemd/system/mwservice.service ]; then
    # Stop the old Middleware agent service
    systemctl stop mwservice

    # Disable the old Middleware agent service
    systemctl disable mwservice

    # Old executable path
    OLD_EXECUTABLE_DIR=$(grep -oP 'ExecStart=\K.*' /etc/systemd/system/mwservice.service | xargs dirname | xargs dirname)
    OLD_EXECUTABLE_PATH=$(grep -oP 'ExecStart=\K.*' /etc/systemd/system/mwservice.service)
    # Check for old executable and convert it config file
    # Extract environment variables and their values from the script
    extracted_vars=$(extract_environment_variables "${OLD_EXECUTABLE_PATH}")

    # Loop through each extracted variable and get the key and value separately
    while IFS='=' read -r key value; do
        trimmed_value=$(echo "$value" | xargs)
        if [ -n "$trimmed_value" ]
        then
            handle_variable "$key" "$value"
        fi
    done <<< "$extracted_vars"

    # Remove old Middleware agent executable
    rm -fr $OLD_EXECUTABLE_DIR

    # Remove the old Middleware agent service file
    rm -f /etc/systemd/system/mwservice.service
else
    # Check if environment variables are set
    if [ -z "${MW_API_KEY}" ] || [ -z "${MW_TARGET}" ]; then
        # MW_API_KEY and MW_TARGET are not set
        enable_service
        
        echo "Middleware Agent (mw-agent) is installed successfully but needs to be configured."
        echo "Please set 'api-key' and 'target' in ${CONFIG_FILE} and restart the mw-agent service."
        echo "mw-agent service can be restarted using the following command: systemctl restart mw-agent."
        echo "For more information, refer to the Middleware agent documentation at https://docs.middleware.io/docs/agent/installation/linux"
        exit 0
    else 
        # Update configuration file with environment variable values
        handle_variable "MW_API_KEY" "${MW_API_KEY}"
        handle_variable "MW_TARGET" "${MW_TARGET}"

        if [ -n "${MW_CONFIG_CHECK_INTERVAL}" ]; then
            handle_variable "MW_CONFIG_CHECK_INTERVAL" "${MW_CONFIG_CHECK_INTERVAL}"
        fi

        if [ -n "${MW_HOST_TAGS}" ]; then
            handle_variable "MW_HOST_TAGS" "${MW_HOST_TAGS}"
        fi

        if [ -n "${MW_AGENT_INTERNAL_METRICS_PORT}" ]; then
            handle_variable "MW_AGENT_INTERNAL_METRICS_PORT" "${MW_AGENT_INTERNAL_METRICS_PORT}"
        fi

        if [ -n "${MW_API_URL_FOR_CONFIG_CHECK}" ]; then
            handle_variable "MW_API_URL_FOR_CONFIG_CHECK" "${MW_API_URL_FOR_CONFIG_CHECK}"
        fi

        if [ -n "${MW_ENABLE_SYNTHETIC_MONITORING}" ]; then
            handle_variable "MW_ENABLE_SYNTHETIC_MONITORING" "${MW_ENABLE_SYNTHETIC_MONITORING}"
        fi 

        if [ -n "${MW_FETCH_ACCOUNT_OTEL_CONFIG}" ]; then
            handle_variable "MW_FETCH_ACCOUNT_OTEL_CONFIG" "${MW_FETCH_ACCOUNT_OTEL_CONFIG}"
        fi

        if [ -n "${MW_AGENT_FEATURES_SYNTHETIC_MONITORING}" ]; then
            handle_variable "MW_AGENT_FEATURES_SYNTHETIC_MONITORING" "${MW_AGENT_FEATURES_SYNTHETIC_MONITORING}"
        fi

        if [ -n "${MW_AGENT_FEATURES_METRIC_COLLECTION}" ]; then
            handle_variable "MW_AGENT_FEATURES_METRIC_COLLECTION" "${MW_AGENT_FEATURES_METRIC_COLLECTION}"
        fi

        if [ -n "${MW_AGENT_FEATURES_LOG_COLLECTION}" ]; then
            handle_variable "MW_AGENT_FEATURES_LOG_COLLECTION" "${MW_AGENT_FEATURES_LOG_COLLECTION}"
        fi

        if [ -n "${MW_API_URL_FOR_SYNTHETIC_MONITORING}" ]; then
            handle_variable "MW_API_URL_FOR_SYNTHETIC_MONITORING" "${MW_API_URL_FOR_SYNTHETIC_MONITORING}"
        fi

        if [ -n "${MW_AGENT_SELF_PROFILING}" ]; then
            handle_variable "MW_AGENT_SELF_PROFILING" "${MW_AGENT_SELF_PROFILING}"
        fi

        if [ -n "${MW_PROFILING_SERVER_URL}" ]; then
            handle_variable "MW_PROFILING_SERVER_URL" "${MW_PROFILING_SERVER_URL}"
        fi

        if [ -n "${MW_LOGFILE}" ]; then
            handle_variable "MW_LOGFILE" "${MW_LOGFILE}"
        fi

        if [ -n "${MW_LOGFILE_SIZE}" ]; then
            handle_variable "MW_LOGFILE_SIZE" "${MW_LOGFILE_SIZE}"
        fi

        if [ -n "${MW_FLUENT_PORT}" ]; then
            handle_variable "MW_FLUENT_PORT" "${MW_FLUENT_PORT}"
        fi

        if [ -n "${MW_DOCKER_ENDPOINT}" ]; then
            handle_variable "MW_DOCKER_ENDPOINT" "${MW_DOCKER_ENDPOINT}"
        fi
        
    fi
fi

restart_service
