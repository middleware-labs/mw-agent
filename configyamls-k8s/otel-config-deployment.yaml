receivers:
  k8s_cluster:
    auth_type: serviceAccount
    collection_interval: 15s
    node_conditions_to_report: [ Ready, DiskPressure, MemoryPressure, PIDPressure, NetworkUnavailable ]
    distribution: kubernetes
    allocatable_types_to_report: [ cpu, memory, ephemeral-storage, storage ]
  
  prometheus:
    config:
      scrape_configs:
        - job_name: "otel-collector"
          scrape_interval: 5s
          static_configs:
            - targets: ["0.0.0.0:8888"]
  
  k8s_events:
    auth_type: serviceAccount
    namespaces: all
  fluentforward:
    endpoint: 0.0.0.0:8006
  # kubeletstats:
  #   ceat_path:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:9319
        # max_recv_msg_size_mib: 8
      http:
        endpoint: 0.0.0.0:9320
exporters:
  logging:
    loglevel: warn
  otlp:
    endpoint: ${MW_TARGET}
processors:
  # filter/blanklog:
  #   logs: 
  #     exclude:
  #       match_type: strict
  #       bodies:
  #       - \n
  #       - {}\n
  k8sattributes:
    auth_type: "serviceAccount"
    passthrough: false
    filter:
      node_from_env_var: KUBE_NODE_NAME
    extract:
      metadata:
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.deployment.name
        # - k8s.cluster.name
        - k8s.namespace.name
        - k8s.node.name
        - k8s.pod.start_time
    pod_association:
      - sources:
        - from: resource_attribute
          name: k8s.pod.ip
      - sources:
        - from: resource_attribute
          name: k8s.pod.uid
      - sources:
        - from: connection
  resource:
    attributes:
      - key: host.id
        from_attribute: host.name
        action: upsert
      - key: mw.account_key
        action: insert
        value: ${MW_API_KEY}
      - key: agent.installation.time
        from_attribute: host.name
        action: insert
      - key: agent.installation.time
        value: ${MW_AGENT_INSTALLATION_TIME}
        action: update
      - key: k8s.cluster.name
        from_attribute: k8s.node.uid
        action: insert
      - key: k8s.cluster.name
        from_attribute: k8s.namespace.uid
        action: insert
      - key: k8s.cluster.name
        from_attribute: k8s.pod.uid
        action: insert
      - key: k8s.cluster.name
        from_attribute: k8s.container.name
        action: insert
      - key: k8s.cluster.name
        from_attribute: k8s.replicaset.uid
        action: insert
      - key: k8s.cluster.name
        from_attribute: k8s.statefulset.uid
        action: insert
      - key: k8s.cluster.name
        from_attribute: k8s.cronjob.uid
        action: insert
      - key: k8s.cluster.name
        from_attribute: k8s.job.uid
        action: insert
      - key: k8s.cluster.name
        from_attribute: k8s.daemonset.uid
        action: insert
      - key: k8s.cluster.name
        from_attribute: k8s.deployment.uid
        action: insert
  resource/hostmetrics:
    attributes:
      - key: is.k8s.node
        action: insert
        value: "yes"
  
  resource/cluster:
    attributes:
      - key: k8s.cluster.name
        action: update
        value: ${MW_KUBE_CLUSTER_NAME}
      - key: host.id
        action: update
        from_attribute: k8s.node.name
      - key: host.name
        action: update
        from_attribute: k8s.node.name
  
  resource/logs:
    attributes:
      - key: service.name
        action: insert
        value: middleware-logs

  resourcedetection:
    detectors: [ env, system, docker ]
    system:
      hostname_sources: ["os"]
    timeout: 2s
    override: false
  #  memory_limiter:
  #    check_interval: 1s
  #    limit_mib: 4000
  #    spike_limit_mib: 800
  batch:
  batch/2:
    send_batch_size: 2000
    timeout: 10s
  attributes/traces:
    actions:
      - key: mw.service.name.derived
        from_attribute: db.system
        action: insert
      - key: mw.service.name.derived
        from_attribute: messaging.system
        action: insert
      - key: mw.service.name.derived
        from_attribute: rpc.system
        action: insert
      - key: mw.service.name.derived
        from_attribute: http.scheme
        action: insert
      - key: mw.service.name.derived
        from_attribute: faas.trigger
        action: insert
  attributes/logs:
    actions:
      - key: source
        from_attribute: name
        action: upsert
      - key: source
        from_attribute: operator_type
        action: upsert
      - key: source
        from_attribute: log.file.name
        action: upsert
      - key: source
        from_attribute: fluent.tag
        action: upsert
      - key: source
        from_attribute: service.name
        action: upsert
      - key: source
        from_attribute: project.name
        action: upsert
      - key: source
        from_attribute: serviceName
        action: upsert
      - key: source
        from_attribute: projectName
        action: upsert
      - key: source
        from_attribute: pod_name
        action: upsert
      - key: source
        from_attribute: container_name
        action: upsert
      - key: source
        from_attribute: namespace
        action: upsert 
service:
    telemetry:
      logs:
        level: "fatal"
      metrics:
        address: 0.0.0.0:8888
    #extensions:
    #  - health_check
    #  - zpages
    #  - pprof
    pipelines:
      traces:
        receivers: [ otlp ]
        processors: [ resourcedetection,resource, resource/cluster, attributes/traces, batch, batch/2 ]
        exporters: [  otlp ]
      logs:
        receivers: [fluentforward, k8s_events, otlp ]
        processors: [ resourcedetection, resource, resource/cluster, attributes/logs, resource/logs, k8sattributes, batch, batch/2 ]
        exporters: [ otlp ]
      metrics:
        receivers: [ prometheus, otlp, k8s_cluster ]
        processors: [ resourcedetection, resource, k8sattributes, resource/cluster, batch, batch/2]
        exporters: [ otlp ]
