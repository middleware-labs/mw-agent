exporters:
  logging:
    loglevel: debug
  otlp/2:
    endpoint: ${MW_TARGET}
    headers:
      authorization: ${MW_API_KEY}
    sending_queue:
      enabled: true
      num_consumers: 100
      queue_size: 10000
processors:
  attributes/logs:
    actions:
    - action: upsert
      from_attribute: name
      key: source
    - action: upsert
      from_attribute: operator_type
      key: source
    - action: upsert
      from_attribute: log.file.name
      key: source
    - action: upsert
      from_attribute: fluent.tag
      key: source
    - action: upsert
      from_attribute: service.name
      key: source
    - action: upsert
      from_attribute: project.name
      key: source
    - action: upsert
      from_attribute: serviceName
      key: source
    - action: upsert
      from_attribute: projectName
      key: source
    - action: upsert
      from_attribute: pod_name
      key: source
    - action: upsert
      from_attribute: container_name
      key: source
    - action: upsert
      from_attribute: namespace
      key: source
  attributes/traces:
    actions:
    - action: insert
      from_attribute: db.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: messaging.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: rpc.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: http.scheme
      key: mw.service.name.derived
    - action: insert
      from_attribute: faas.trigger
      key: mw.service.name.derived
  batch: null
  cumulativetodelta/apache:
    include:
      match_type: strict
      metrics:
      - apache.bytes_per_sec
      - apache.requests_per_sec
  deltatorate/apache:
    metrics:
    - apache.bytes_per_sec
    - apache.requests_per_sec
  resource:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: insert
      from_attribute: host.name
      key: agent.installation.time
    - action: update
      key: agent.installation.time
      value: ${MW_AGENT_INSTALLATION_TIME}
    - action: delete
      key: host.name
  resource/hostid:
    attributes:
    - action: upsert
      from_attribute: host.name
      key: host.id
  resource/logs:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: insert
      key: service.name
      value: middleware-logs
    - action: delete
      key: host.name
  resource/traces:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: delete
      key: host.name
  resourcedetection:
    detectors:
    - env
    - ec2
    - system
    - docker
    override: false
    system:
      hostname_sources:
      - os
    timeout: 5s
  transform/apache:
    error_mode: ignore
    metric_statements:
    - context: datapoint
      statements:
      - convert_sum_to_gauge() where metric.name == "apache.bytes_per_sec"
      - convert_sum_to_gauge() where metric.name == "apache.requests_per_sec"
receivers:
  apache/1:
    collection_interval: 10s
    endpoint: http://localhost:8080/server-status?auto
  apache/2:
    collection_interval: 10s
    endpoint: http://localhost:8081/server-status?auto
  docker_stats:
    api_version: 1.24
    collection_interval: 5s
    endpoint: unix:///var/run/docker.sock
    timeout: 20s
  filelog:
    include:
    - /var/log/**/*.log*
    - /var/lib/docker/containers/**/*.log*
    - /var/log/mw-agent/apt-installation-*.log
    - /var/log/mw-agent/rpm-installation-*.log
    - /home/hardik/Projects/integration-demo-projects/apache/logs/httpd1/access.log
    - /home/hardik/Projects/integration-demo-projects/apache/logs/httpd2/access.log
    include_file_name_resolved: true
    include_file_path: true
    include_file_path_resolved: true
    max_log_size: 1MiB
    operators:
    - field: attributes.regex_identified
      id: adding_regex_to_attributes9
      if: body matches "\\[(.+)\\] \\[(.+)\\] \\[(.*)\\] (.+)"
      type: add
      value: \\[(.+)\\] \\[(.+)\\] \\[(.*)\\] (.+)
    - id: extract_metadata_from_regex9
      if: body matches "\\[(.+)\\] \\[(.+)\\] \\[(.*)\\] (.+)"
      output: backup_unresolved_body
      parse_from: body
      parse_to: attributes
      regex: \[(?P<date>.+)\] \[(?P<process_id>.+)\] \[(?P<level>.*)\] (?P<zzz>.+)
      type: regex_parser
    - field: attributes.regex_identified
      id: adding_regex_to_attributes
      if: body matches "ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+
        err=.+"
      output: systemd_err
      type: add
      value: ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+ err=.+
    - id: systemd_err
      if: body matches "ts=.+ caller=.+ level=.+ msg=.+ name=systemd duration_seconds=.+
        err=.+"
      output: extract_metadata_from_filepath
      parse_from: body
      regex: ts=(?P<systemd_err_ts>.+) caller=(?P<systemd_err_caller>.+) level=(?P<level>.+)
        msg=(?P<systemd_err_msg>.+) name=(?P<name>.+) duration_seconds=(?P<systemd_err_duration_seconds>.+)
        err="(?P<regex_resolved_body>.+)"
      type: regex_parser
    - id: extract_metadata_from_filepath
      output: backup_unresolved_body
      parse_from: attributes["log.file.path"]
      regex: ^/var/lib/docker/containers/(?P<docker_container_id>[^_]+)/.*log$
      type: regex_parser
    - from: body
      id: backup_unresolved_body
      if: attributes.regex_resolved_body != nil
      output: systemd_err_move
      to: attributes.regex_unresolved_body
      type: copy
    - from: attributes.regex_resolved_body
      id: systemd_err_move
      if: attributes.regex_resolved_body != nil
      to: body
      type: move
    - field: resource["service.name"]
      id: apache_1_0
      if: attributes["log.file.path"] matches "/home/hardik/Projects/integration-demo-projects/apache/logs/httpd1/access.log"
      type: add
      value: apache_1_0
    - id: apache_log_combined
      if: body matches "(\\S+) (\\S+) (\\S+) \\[(.*?)\\] \"(.*?)\" (\\d{3}) (\\S+)
        \"(.*?)\" \"(.*?)\""
      parse_from: body
      parse_to: attributes
      regex: (?P<remote_hostname>\S+) (?P<remote_logname>\S+) (?P<remote_user>\S+)
        \[(?P<request_time>.*?)\] "(?P<method>\w+) (?P<url>.*?) HTTP\/(?P<version>\d\.\d)"
        (?P<status>\d+) (?P<response_size_clf>\d+|-) "(?P<Referer>.*?)" "(?P<User_Agent>.*?)"
      type: regex_parser
    - field: resource["service.name"]
      id: apache_2_1
      if: attributes["log.file.path"] matches "/home/hardik/Projects/integration-demo-projects/apache/logs/httpd2/access.log"
      type: add
      value: apache_2_1
  fluentforward:
    endpoint: 0.0.0.0:8006
  hostmetrics:
    collection_interval: 5s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
        metrics:
          system.disk.io.speed:
            enabled: true
      filesystem:
        include_virtual_filesystems: true
        metrics:
          system.filesystem.utilization:
            enabled: true
      load:
        cpu_average: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
        metrics:
          system.network.io.bandwidth:
            enabled: true
      paging: {}
      process:
        avoid_selected_errors: true
        mute_process_name_error: true
      processes: {}
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:9319
      http:
        endpoint: 0.0.0.0:9320
  prometheus:
    config:
      scrape_configs:
      - job_name: otel-collector
        scrape_interval: 5s
        static_configs:
        - targets:
          - 127.0.0.1:${MW_AGENT_INTERNAL_METRICS_PORT}
service:
  pipelines:
    logs:
      exporters:
      - otlp/2
      processors:
      - resource/logs
      - resourcedetection
      - resource/hostid
      - attributes/logs
      - batch
      receivers:
      - otlp
      - fluentforward
      - filelog
    metrics:
      exporters:
      - otlp/2
      processors:
      - resource
      - resourcedetection
      - resource/hostid
      - batch
      - cumulativetodelta/apache
      - deltatorate/apache
      - transform/apache
      receivers:
      - hostmetrics
      - docker_stats
      - otlp
      - prometheus
      - apache/1
      - apache/2
    traces:
      exporters:
      - otlp/2
      processors:
      - resource/traces
      - resourcedetection
      - resource/hostid
      - attributes/traces
      - batch
      receivers:
      - otlp
  telemetry:
    logs:
      level: fatal
    metrics:
      address: 127.0.0.1:${MW_AGENT_INTERNAL_METRICS_PORT}
